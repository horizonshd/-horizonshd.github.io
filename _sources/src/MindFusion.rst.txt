================================================================================
MindFusion.Diagramming for WPF, V3.7
================================================================================

.. :

    = - ` : ' " ~ ^ _ * + # < >

    ====================
    --------------------
    ~~~~~~~~~~~~~~~~~~~~
    ********************
    ++++++++++++++++++++
    ####################
    ::::::::::::::::::::
    >>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<


`参考文档 <https://www.mindfusion.eu/onlinehelp/wpfdiagram/index.htm>`_
================================================================================

1. 介绍
--------------------------------------------------------------------------------

WpfDiagram 是一个通用软件组件，可用于以多种不同格式显示各种类型的图表。
它是作为一个 WPF 控件实现的，
并且可以轻松地集成到任何针对 Microsoft WPF 平台的应用程序中。
通过为您的软件提供现成的用于可视化和编辑关系数据的功能，
WpfDiagram 为您节省了数百小时的编码和调试工作。

WpfDiagram 可以使用图形表示：

    -   工作流程
    -   类关系
    -   图和网络
    -   实体关系/数据库图
    -   IVR系统
    -   工业自动化流程
    -   家谱树
    -   算法和流程图
    -   组织结构图
    -   XML文件
    -   分类层次结构
    -   以及更多

WpfDiagram 为创建或编辑图提供了直观的用户交互模型。
此外，它的编程接口还提供了许多有用的功能，
从打印和 XML 序列化到路径查找和自动布局算法。

2. 授权许可
--------------------------------------------------------------------------------

MindFusion 组件没有单独的试用版本。
当您购买组件后，可以在官网页面上找到该组件的许可密钥。
将此许可密钥分配给 **LicenseKey** 属性，以禁用组件的评估模式并停止显示试用消息。
如果开发的应用程序包含多个 MindFusion 组件，
可以从应用程序启动代码中调用 ``MindFusion.Licensing.LicenseManager.AddLicense(key)``
方法指定一次密钥，而不用在使用每个控件时设置。

3. 基本信息
--------------------------------------------------------------------------------

3.1 关于 WpfDiagram 组件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   再分发是免费的
-   程序集是强命名的
-   可以购买源代码
-   是用C#编写的

3.2 用户交互
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   多种用户交互模式
-   自由式绘图
-   自由形式选择模式
-   滚动和缩放
-   Windows剪贴板的复制、粘贴
-   平移
-   用鼠标拖动项时自动滚动
-   放大
-   网格对齐
-   节点对齐引导线
-   多项选择
-   Tooltips
-   可以为节点定义停靠点（Docking points）
-   撤销/重做支持
-   同时调整多个节点的大小
-   旋转和翻转形状

3.3 编程开发
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   对图表元素的程序化访问
-   流畅的 API 的扩展方法
-   用于自定义外观和行为的众多属性
-   众多的实用方法
-   路径搜索和环形检测
-   丰富的事件集

3.4 Diagram 的存储和检索
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   磁盘上的文件
-   .NET 流
-   ASCII 字符串
-   XML文件
-   JSON 字符串

3.5 输出
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   使用 WPF 渲染到屏幕
-   打印和打印预览
-   到使用 HTML 图像映射的浏览器
-   以 3D 方式显示图形

3.6 导入和导出
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   导入 Visio 2003 XML (VDX) 图纸。
-   导入 Visio 2013 XML (VSDX) 图纸
-   导入 OpenOffice Draw (ODG) 文件
-   导入 Scalable Vector Graphics （SVG） 文件
-   导出位图图像
-   导出 Portable Document Format (PDF) 文件
-   导出 Scalable Vector Graphics (SVG) 文件
-   导出 Visio 2003 XML (VDX) 图纸
-   导出 Visio 2013 XML (VSDX) 图纸
-   导出 Excel Open XML Format (XLSX) 文件 
-   导出 Windows MetaFile (WMF) 图像
-   导出 Drawing Exchange Format (DXF) 文件

3.7 Diagram 元素
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   使用任何 WPF UIElement 作为 diagram node
-   超过 100 种预定义节点形状
-   在节点中显示 SVG 绘图
-   能够定义自定义形状和形状库
-   可模板化的图表节点
-   形状可以任意角度的旋转
-   容器节点
-   无限行数和列数的表格
-   表格单元格可以跨越几列和几行
-   用户绘制的自由形式的轮廓
-   在 TreeView 节点中显示层级数据
-   使用 Visio 模板文件显示形状
-   给 diagram item 指定图层
-   表行的 Sections 可以展开或折叠
-   链接可以由多个段（segments）组成
-   链接段（link segments）可以是直线或曲线
-   每个链接显示多个标签
-   支持自定义节点和链接类型

3.8 自动布局
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   避开障碍方法
-   Spring-Embedder图形布局
-   定向树布局
-   水平/垂直二元树布局
-   径向树状布局
-   分形树布局
-   分层图形布局
-   网格布局
-   模拟退火图布局
-   单向图布局
-   正交图形布局
-   圆形图布局
-   正交链路路由器
-   源代码流程图布局
-   决策流程图布局
-   流程图布局
-   树形图布局
-   泳道图布局图
-   拓扑图布局
-   级联图布局
-   层次图布局
-   三角形图形布局
-   多层次图形布局
-   自动链接路由

3.9 外观
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   节点可以显示图像和文本
-   各种文本对齐方式
-   文字可以在多边形区域内布局。
-   玻璃视觉效果
-   样式化的类似HTML的文本格式
-   可定制的字体和颜色
-   节点的自定义绘画 
-   阴影
-   用户指定的鼠标光标
-   Z顺序
-   丰富的笔和画笔风格选择
-   透明节点
-   隐形节点
-   背景泳道网格

3.10 Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   锁定图表元素
-   支持只读模式
-   表格可以滚动
-   折叠和展开层次结构分支
-   In-place text editing
-   链接相对于其所连接的节点动态定位

3.11 Link Diagram Items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   节点到节点
-   表行到表行
-   表行到节点
-   未连接的链接

3.12 层次分组
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   将节点附加到其他节点
-   将节点附加到链接控制点（link control points）
-   将节点附加到链接段（link segments）

3.13 辅助控件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-   预览控件
-   标尺控件
-   虚拟图表控件
-   NodeListView控件
-   ShapeListBox控件
-   LayerListView控件
-   TabbedDiagramView控件
-   缩放控件
-   形状设计器控件

4. 编程接口概述
--------------------------------------------------------------------------------

4.1 集成 WpfDiagram 到用户界面中
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

WpfDiagram 开发包中提供的大部分功能都是由 `Diagram <https://www.mindfusion.eu/onlinehelp/wpfdiagram/T_MindFusion_Diagramming_Wpf_Diagram.htm>`_ 
类实现的。你可以直接它的实例作为 **Panel** 派生对象的子元素。
在这种情况下，它将和其它 WPF 控件一样进行测量和布局 。
注意，在测量阶段， **Diagram** 实例总是返回他的 `Bounds <https://www.mindfusion.eu/onlinehelp/wpfdiagram/P_MindFusion_Diagramming_Wpf_Diagram_Bounds_0.htm>`_
属性作为所需的尺寸，而不是使用其内容的尺寸。

**Diagram** 也可以放在以下容器中：

    -   **ScrollViewer**: 使用它以提供对 Diagram 内容的滚动和平移操作。
    -   `Ruler <https://www.mindfusion.eu/onlinehelp/wpfdiagram/T_MindFusion_Diagramming_Wpf_Ruler.htm>`_ :
        提供滚动操作，还显示对齐标尺，用于测量和对齐 diagram 中的对象。
    -   `DiagramView <https://www.mindfusion.eu/onlinehelp/wpfdiagram/T_MindFusion_Diagramming_Wpf_DiagramView.htm>`_ :
        支持显示同一个 diagram 的多个视图，每个视图具有不同的缩放级别和滚动位置。

4.2 Diagram 结构
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  标准的 Item 类型

    -   Shape Nodes
    -   SVG Nodes
    -   Templated Nodes
    -   Table Nodes
    -   Container Nodes
    -   Free-form Nodes
    -   TreeView Nodes
    -   Visio Nodes
    -   Barcode Nodes
    -   Links
    
#.  自定义 Item 类型

    -   序列化
    -   剪贴板操作
    -   渲染
    -   用户交互

#.  使用 WPF 控件作为节点

    -   交互式创建
    -   编程式创建

#.  创建和删除 Items

    -   编程式创建 Items
    -   绘制新的 Items
    -   删除 Items

#.  访问 Items

    -   选中的 Items
    -   查找 Items
    -   关系查询

#.  附加（Attaching）、组合（Grouping） Items

    -   可能的使用场景
    -   组合（Grouping）
    -   Unions
    -   附加（Attaching） Items 到 Group 
    -   访问 Group 中的 Items
    -   销毁 Groups

#.  图层

    -   说明
    -   Layer list 控件

#.  树型分支的折叠展开

    -   显示展开/折叠按钮
    -   Defining Tree Direction
    -   递归地展开分支
    -   HtmlBuilder 的支持
    -   自定义展开/折叠功能

#.  多个 Diagram Pages

4.3 用户交互
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  控制用户交互

    -   禁用交互
    -   指定如何解释用户的操作
    -   设置 diagram 的边界（Bounds）
    -   Item 的约束
    -   控制链接（Links）如何连接到节点（Nodes）
    -   In-place Text Editing
    -   验证事件
    -   杂项

#.  事件的处理
    
#.  单选、多选

    -   Items 的选取和编辑
    -   Active Item
    -   多选
    -   绘制选中套索（Lasso）
    -   外观
    -   枚举 Items
    -   自动选取
    
#.  自动对齐

    -   对齐网格
    -   节点（nodes）对齐到节点（ nodes ）
    -   将链接吸附（snap）到附近的节点（nodes）

#.  剪贴板操作
#.  滚动和缩放

    -   自动滚动
    -   Diagram 尺寸
    -   编程方式控制滚动
    -   滚动表格
    -   缩放
    -   套索（Lasso）缩放工具
    -   放大（Magnifying）
    -   平移

#.  Tooltips
#.  In-place Editing the Contents of Items

    -   标准的 in-place 编辑
    -   对自定义 Items 的 in-place 编辑

4.4 位置和布局
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  Items 的布局 —— 位置、尺寸和 Z-顺序

    -   测量单位
    -   Nodes 的位置和尺寸
    -   链接控制点（Link Control Points）
    -   动态链接（Link Dynamic）
    -   交互式移动或调整尺寸
    -   控制 Z-顺序

#.  对齐网格
#.  车道（Lanes）网格
#.  Diagram 的自动布局

    -   Force-directed layout algorithms
    -   Topology based layout algorithms
    -   Semantics based layout algorithms
    -   Multi-level layout algorithms

#.  链接的路由

    -   设置链接的路由器
    -   自动式或显式路由
    -   调整（Tuning）路由算法

#.  锚点（Anchor points）和模版（Patterns）

    -   锚点
    -   锚点模板
    -   锚点模板和表格
    -   锚点和用户交互
    -   编程式设置锚点

4.5 撤销重做
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  概述
    
    用户执行的交互操作和更改图表结构的编程命令都记录在历史队列中。
    当操作记录仍在该队列中时，可以撤消或重做操作。
    队列有一个固定的长度——如果它满了，记录一个新的动作会使最旧的一个从队列中删除。
    
    默认情况下，撤销功能是被禁用的。将 ``UndoEnabled`` 属性设置为 **true** 以启用。
    要撤消或重做一个操作，请调用 ``UndoManager`` 的 ``Undo`` 或 ``Redo`` 方法。
    WpfDiagram 组件没有提供用于撤消/重做的键盘快捷键。
    应用程序必须有自己的菜单项和/或键盘加速器来提供必要的用户接口，
    并调用相应的方法来响应 UI 事件。
    
    WpfDiagram 自动保存以下类型的操作，以供稍后的撤销/重做：
    
        -   向 Diagram 中添加一个 Item
        -   从 Diagram 中移除一个 Item
        -   移动或调整 Items 的尺寸
        -   创建一个 Group
        -   销毁一个 Group
        -   展开或折叠 Trees
        -   滚动表格的行
        -   添加或移除表格的行
    
    对属性值的更改不会自动保存在历史记录中。
    如果您的应用程序必须支持对属性更改的撤消/重做，请使用 ``ChangeItemCmd`` 命令。
    **ChangeItemCmd** 允许将多个属性的更改记录为一个可撤销的原子操作。

    在某些情况下，您可能需要创建自定义的操作或命令类型。
    例如，假设您需要对 Item 的 Tag 属性所做的更改或对嵌入在 ControlNode 类型的 Item 
    中的控件的更改实现撤消/重做。但是，WpfDiagram 无法检测到此类更改，因此无法撤消它们。
    这种情况下，为了实现撤消/重做，您必须创建 ``Command`` 的子类并实现
    ``Execute`` 、 ``Undo`` 、 ``Redo`` 方法。
    
#.  动作（Actions）和命令（Commands）

    WpfDiagram 可执行的可撤销交互操作和编程命令由 ``Command`` 子类表示。
    **Command** 类提供了 ``Execute`` 、 ``Undo`` 或 ``Redo`` 操作所需的接口。
    在某些情况下，必须在派生类中实现这些方法，但禁止直接调用它们。
    请使用 ``UndoManager`` 的 **Undo** 或 **Redo** 方法撤消或重做命令。
    使用 **UndoManager** 的方法将调用相应 **Command** 的方法，
    此外还更新命令历史和 Diagram 的状态。
    
    WpfDiagram 提供的以下这些类派生自 **Command** ：
    
    ========================    ================================================
    命令                        描述
    ========================    ================================================
    AddItemCmd                  向 diagram 中添加一个 Item
    RemoveItemCmd               从 diagram 中移除一个 Item
    AddGroupCmd                 创建一个 Group
    RemoveGroupCmd              销毁一个 Group
    GroupAttachCmd              附加（attach）一个 Item 到一个 Group
    GroupDetachCmd              从一个 Group 中分离（detach）一个 Item
    ModifyItemCmd               对一个 Item 进行移动或调整其尺寸
    RedimTableCmd               改变表的行数或列数
    ExpandItemCmd               Expands or collapses a tree of items.
    ScrollTableCmd              滚动表格的行
    ExpandHeaderRowCmd          Expands or collapses tables sections.
    ChangeItemCmd               处理 Item 属性更改的撤消/重做
    CompositeCmd                允许同时撤消和重做多个操作
    ========================    ================================================
    
    大多数这些类的实例都是由 WpfDiagram 隐式创建的，用以响应用户的操作或方法调用。
    您可能只需要显式实例化 **ChangeItemCmd** —— 用于撤消或重做属性更改；
    和 **CompositeCmd** —— 将多个操作表现为单个可撤消的操作。
    
    您的应用程序的数据可能紧密集成在 WpfDiagram 图表中，
    例如通过嵌入在 ControlNode Items 中的 Tag 对象或 .NET 控件。
    在这些情况下，WpfDiagram 无法检测、撤消或重做对数据的更改。
    要实现对这些更改的撤销，必须继承 **Command** 类,
    并实现 **Execute** 、 **Undo** 和 **Redo** 方法。
    要在撤消/重做历史记录中记录您自己的操作，
    请调用 **Diagram** 类的 ``ExecuteCommand`` 方法。
    
#.  Undo Manager

    Undo Manager 充当命令、图表和命令历史记录之间的中介。
    它由 ``UndoManager`` 类表示，
    该类的唯一实例可以通过 ``Diagram`` 的 ``UndoManager`` 属性访问。

    默认情况下，撤消功能是被禁用的 —— 命令被执行，但不会记录在历史中，
    以便以后撤消或重做。要启用撤消功能，请将 ``UndoEnabled`` 设置为 **true** 。
    在执行不希望被用户撤消的操作之前（例如创建特殊的开始/结束节点），您可能需要禁用撤消。
    另一种可能需要禁用撤销的情况是，
    以编程方式创建大量 diagram items —— 比如数百或数千项。
    WpfDiagram 为每个 Item 的创建创建一个撤销记录；
    如果历史记录的 ``Capacity`` 小于创建的 items 的数目，
    则在添加新 items 时，大多数记录将从历史队列中删除。
    这将浪费处理能力和内存来创建不会被使用的记录。

    作为一种替代方法，您可以通过调用 ``StartComposite`` 方法来创建组合记录。
    所有后续的 item 创建操作都保存在这个组合记录中。
    该组合记录以单个记录的形式保存在历史记录中，
    该组合记录允许将其中包含的所有操作作为单个操作进行撤消或重做。
    **StartComposite** 创建并返回一个 ``CompositeCmd`` 的实例，
    该实例在 undo manager 中标记为 active composite。
    当有一个 active composite 时，所有执行的操作都会添加到其中。
    调用 active composite 的 ``Execute`` 方法停止继续向其中添加子命令，
    并将其作为可撤销的原子子操作保存在历史记录中。
    
    使用 undo manager 的 ``Undo`` 和 ``Redo`` 方法来撤消或重做操作。
    不要调用 ``Command`` 类的相应方法 —— 它们由 undo manager 在内部调用，
    此外当前历史记录的位置也会更新并重新绘制图表视图。
    
#.  历史记录
#.  关于属性更改的撤销重做
#.  组合命令
#.  派生 Command 类

4.6 序列化和输出
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  序列化 Diagram

    -   XML 序列化
    -   JSON 序列化

#.  导出 Diagram

    -   导出图片
    -   导出 PDF
    -   导出 SVG
    -   导出 WMF 图片
    -   导出 Visio
    -   导出 Excel
    -   导出 DXF

#.  打印和打印预览

4.7 外观
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  样式和主题

    -   样式
    -   主题
    -   主题编辑器

#.  节点的效果（Effects）

    -   Aero Effect
    -   Glass Effect
    -   示例

#.  修改 Diagram 的外观

   -    背景
   -    阴影
   -    选中效果
   -    鼠标光标
   -    网格设置

#.  自定义 Item 的外观

    -   设计样式（Styling）
    -   Pen 的宽度和样式
    -   Diagram 元素的颜色
    -   文本
    -   图像
    -   效果（Effects）
    -   DiagramLink-specific Properties
    -   Rounded Links
    -   Link Crossings
    -   ShapeNode-specific Properties
    -   TableNode-specific Properties

#.  用户自定义的节点形状和自定义绘制

    -   Shape Templates
    -   Dynamic Shapes
    -   Shape Libraries
    -   Custom Painting
    -   Combining Custom Shapes with Custom Drawing
    -   Shape control points

#.  文本属性和格式化

    -   Layout Text in Arbitrary Shapes
    -   Text Wrapping
    -   Text in Tables
    -   Styled Text
    -   Links' Text
    -   Fonts

4.8 Initial Values of Item Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4.9 杂项
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.  Associate Custom Data with Items
#.  Inspecting Items Geometry
#.  Fluent API

5. 教程
--------------------------------------------------------------------------------

5.1 加载数据
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.2 加载层次结构类型的数据
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.3 创建一个自定义节点类型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.4 自定义节点的集成
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

开发笔记
================================================================================