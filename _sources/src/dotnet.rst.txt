======
dotnet
======


基础
====

AppDomain
---------



IDisposable
-----------

WeakReference
-------------

WeakEventManager IWeakEventListener
-----------------------------------

WeakEventManager<TEventSource, TEventArgs> 这个泛型类继承并实现了抽象类
WeakEventManager，使用起来也比较简单，是个不错的选择，只是其实现过程中会有
一点反射的使用，对性能有一点点影响。

.. code-block:: csharp

    using System;
    using System.Windows;

    namespace Sandbox
    {
        internal class Program
        {
            private static void Main(string[] args)
            {
                var publisher = new Publisher();
                var subcriber1 = new Subcriber("A");
                var subcriber2 = new Subcriber("B");
                var subcriber3 = new Subcriber("C");
                WeakEventManager<Publisher, ValueChangedEventArgs>.AddHandler(publisher, "ValueChanged", subcriber1.OnValueChanged);
                WeakEventManager<Publisher, ValueChangedEventArgs>.AddHandler(publisher, "ValueChanged", subcriber2.OnValueChanged);
                WeakEventManager<Publisher, ValueChangedEventArgs>.AddHandler(publisher, "ValueChanged", subcriber3.OnValueChanged);
                publisher.ChangeValue(string.Format("{0:FFFFFFF}", DateTime.Now));

                Console.ReadKey();
            }
        }

        #region 发布者

        public delegate void ValueChangedHanlder(object sender, ValueChangedEventArgs e);

        public class Publisher
        {
            public event ValueChangedHanlder ValueChanged;

            public void ChangeValue(object newValue)
            {
                ValueChanged?.Invoke(this, new ValueChangedEventArgs { NewValue = newValue });
            }
        }

        #endregion

        public class ValueChangedEventArgs : EventArgs
        {
            public object NewValue { get; set; }
        }

        #region 订阅者

        public class Subcriber
        {
            private string _name = string.Empty;

            public Subcriber(string name)
            {
                _name = name;
            }

            public void OnValueChanged(object sender, ValueChangedEventArgs e)
            {
                Console.WriteLine(string.Format("[Subcriber - {0}] 值已改变，新值: {1}", _name, e.NewValue));
            }
        }

        #endregion
    }

Reflection
----------

相关的几个名称空间：

    - System.Reflection.Emit
    - 
    
关键类：

    - AppDomain
    - Activator


TypeDescriptor
~~~~~~~~~~~~~~

Emit
~~~~


Expresstion Tree
----------------



精选框架
=========

Caliburn.Micro
--------------

Prism
-----

Dapper
------

AutoMapper
----------

ILMerge
-------

Mono.Cecil
----------

Infralution.Localization.Wpf
----------------------------

FluentValidation
----------------

EasyNetQ
--------

log4net
-------

Moq
----

Fody
----

PropertyChanged
---------------

PeNet
-----

PowerArgs
---------

SevenZipSharp
--------------

SharpZipLib
-----------

zipdiff
-------

进阶
====

什么是 AppDomain ？
--------------------


